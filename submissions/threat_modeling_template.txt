Docker Threat Modeling
Given Docker's system components and the STRIDE framework, identify five potential threats that may arise.

Spoofing Identity
    - A user with bad intension can get access and introduce a malicious package or image into the registry this can be lead the user to a malware image.

Tampering with Data 
    - if not use an updated version of the image and have a vulnerability this can be lead to a malicious system exploited of Docker daemon configuration file.

Information Disclosure 
    - By default, all network traffic is allowed between containers on the same host on the default network bridge, this leads to a leak of restricted data like secrets or keys.

Denial of Service  
    - Memory limit is not set by default on docker images this can be lead to and massive DOS on the images and make them inaccessible because one container can be using most of the memory resources.

Elevation of Privilege 
    - if a user was not in place on the Dockerfile will lead an attacker to get administration or root access to de system and other images containers. 


Kubernetes Threat Modeling
Given Kubernetes' system components and the STRIDE framework, identify five potential threats that may arise.

Spoofing Identity
    - Exposing the  Kube ApiServer to the public could be an entry point for attackers, and allowing them to spoof and take over the cluster orchestration is important to limit the access by setting the TLS tunnel.

Tampering with Data 
    - The configuration of the etcd could be attacked if it is not restricted by setting the permission to files by 644, if not this can affect the entire cluster, compromising the system orchestration.

Repudiation
    - TLS need to be enabled all the time to prevent unauthorized changes on the system Kubelet.

Information Disclosure 
    - Sensitive Information like keys and secrets can be leaked on etcd,  one way to protect the system is to do the communication and store data encrypted the etcd at rest. 

Denial of Service 
 - The orchestration Kubelet can be a subject of DOS if we don’t set “--protect” flag 
 


Docker-bench Run Results and Analysis
From the failed findings, select and document 3 findings from the Docker-bench results that you want to harden based on the 5 attack surface areas you identified in Step 1. At least 1 of the 3 hardened findings should be different from the ones mentioned in the exercise (i.e. 5.10, 5.14, and 5.22).


2.2.b Ensure the logging level is set to 'info' (Scored)
    - Until and unless required, you should not run Docker daemon at debug log level. 

2.1 Ensure network traffic is restricted between containers on the default bridge (Scored)
    - By default, unrestricted network traffic is enabled between all containers on the same host on the default network bridge. This might lead to unintended and unwanted disclosure of information to other containers. Hence, restrict inter-container communication on the default network bridge. To prevent this we need to set up the docker daemon configuration by adding “"icc": false” on the “daemon.json” file. If any communication between containers on the same host is desired, then it needs to be explicitly defined using container linking or alternatively custom networks have to be defined.

4.5 Ensure Content trust for Docker is Enabled (Automated)
    - The content trust provides the ability to use digital signatures for data sent to and received from remote Docker registries. To ensure content trust we need to set up the value of “$DOCKER_CONTENT_TRUST” to “1” this way the system admin is required to follow trust procedures whilst working with the image related commands.

